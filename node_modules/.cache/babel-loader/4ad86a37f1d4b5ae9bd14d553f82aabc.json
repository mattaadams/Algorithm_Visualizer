{"ast":null,"code":"var _jsxFileName = \"/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx\";\nimport React from 'react';\nimport './AlgoViz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRIMARY_COLOR = 'tomato';\nconst N_ARRAY_BARS = 500;\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < N_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * .75));\n    }\n\n    this.setState({\n      array\n    });\n    this.arrayWidth = Math.max(Math.floor(window.innerWidth * .75 / N_ARRAY_BARS) - 2, 1); // Left offset and margins or just do fraction \n\n    alert(this.arrayWidth);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          width: `${this.arrayWidth}px`,\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx"],"names":["React","PRIMARY_COLOR","N_ARRAY_BARS","AlgoViz","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","window","innerHeight","setState","arrayWidth","Math","max","floor","innerWidth","alert","render","map","value","idx","width","backgroundColor","height","min","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;AAGA,MAAMC,aAAa,GAAG,QAAtB;AACA,MAAMC,YAAY,GAAG,GAArB;AAEA,eAAe,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,YAApB,EAAkCS,CAAC,EAAnC,EAAuC;AACrCH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,EAAD,EAAKC,MAAM,CAACC,WAAP,GAAmB,GAAxB,CAAhC;AACD;;AACD,SAAKC,QAAL,CAAc;AAACR,MAAAA;AAAD,KAAd;AACA,SAAKS,UAAL,GAAkBC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAYN,MAAM,CAACO,UAAP,GAAkB,GAAnB,GAAwBnB,YAAnC,IAAiD,CAA1D,EAA4D,CAA5D,CAAlB,CANW,CAMqE;;AAChFoB,IAAAA,KAAK,CAAC,KAAKL,UAAN,CAAL;AACD;;AAGDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAACf,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGC,KAAK,CAACgB,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACT;AACA,QAAA,SAAS,EAAC,WADV;AAGA,QAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAG,GAAE,KAAKV,UAAW,IADrB;AAELW,UAAAA,eAAe,EAAE3B,aAFZ;AAGL4B,UAAAA,MAAM,EAAG,GAAEJ,KAAM;AAHZ;AAHP,SAEKC,GAFL;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAzCkD;;AA4CrD,SAASb,qBAAT,CAA+BiB,GAA/B,EAAoCX,GAApC,EAAyC;AACvC;AACA,SAAOD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACa,MAAL,MAAiBZ,GAAG,GAAGW,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD","sourcesContent":["import React from 'react';\nimport './AlgoViz.css';\n\n\nconst PRIMARY_COLOR = 'tomato';\nconst N_ARRAY_BARS = 500;\n\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < N_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight*.75));\n    }\n    this.setState({array});\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth*.75)/N_ARRAY_BARS)-2,1)// Left offset and margins or just do fraction \n    alert(this.arrayWidth )\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div \n          className=\"array-bar\" \n          key={idx}\n          style={{\n            width: `${this.arrayWidth}px`,\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`\n          }}></div>\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}