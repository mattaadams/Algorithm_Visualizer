{"ast":null,"code":"export function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array; //const auxiliaryArray = array.slice();\n\n  selectionSortHelper(array, animations);\n  return animations;\n}\n\nfunction selectionSortHelper(array, animations) {\n  //selectionSortHelper(auxiliaryArray, array, animations);\n  //selectionSortHelper(auxiliaryArray, array, animations);\n  doSelection(array, animations);\n}\n\nfunction doSelection(array, animations) {\n  let n = auxiliaryArray.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n\n    for (let j = i + 1; j < n; j++) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n\n      if (auxiliaryArray[j] < auxiliaryArray[min]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      // Swapping the elements\n      let tmp = auxiliaryArray[i];\n      auxiliaryArray[i] = auxiliaryArray[min];\n      auxiliaryArray[min] = tmp; //animations.push([i, auxiliaryArray[min]]);\n      //array[i] = auxiliaryArray[min];\n      //animations.push([min, tmp]);\n    }\n  }\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/SelectionSort.js"],"names":["getSelectionSortAnimations","array","animations","length","selectionSortHelper","doSelection","n","auxiliaryArray","i","min","j","push","tmp"],"mappings":"AAAA,OAAO,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;AAChD,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP,CAFyB,CAGhD;;AACAG,EAAAA,mBAAmB,CAACH,KAAD,EAAQC,UAAR,CAAnB;AACA,SAAOA,UAAP;AACD;;AAED,SAASE,mBAAT,CAA6BH,KAA7B,EAAoCC,UAApC,EAAgD;AAC9C;AACA;AACAG,EAAAA,WAAW,CAACJ,KAAD,EAAQC,UAAR,CAAX;AACD;;AACD,SAASG,WAAT,CAAqBJ,KAArB,EAA4BC,UAA5B,EAAwC;AACtC,MAAII,CAAC,GAAGC,cAAc,CAACJ,MAAvB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1B;AACA,QAAIC,GAAG,GAAGD,CAAV;;AACA,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGJ,CAAxB,EAA2BI,CAAC,EAA5B,EAAgC;AAC9BR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACH,CAAD,EAAIE,CAAJ,CAAhB;AACAR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACH,CAAD,EAAIE,CAAJ,CAAhB;;AAEA,UAAIH,cAAc,CAACG,CAAD,CAAd,GAAoBH,cAAc,CAACE,GAAD,CAAtC,EAA6C;AAC3CA,QAAAA,GAAG,GAAGC,CAAN;AACD;AACF;;AACD,QAAID,GAAG,KAAKD,CAAZ,EAAe;AACb;AACA,UAAII,GAAG,GAAGL,cAAc,CAACC,CAAD,CAAxB;AACAD,MAAAA,cAAc,CAACC,CAAD,CAAd,GAAoBD,cAAc,CAACE,GAAD,CAAlC;AACAF,MAAAA,cAAc,CAACE,GAAD,CAAd,GAAsBG,GAAtB,CAJa,CAKb;AACA;AACA;AACD;AACF;AACF","sourcesContent":["export function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  //const auxiliaryArray = array.slice();\n  selectionSortHelper(array, animations);\n  return animations;\n}\n\nfunction selectionSortHelper(array, animations) {\n  //selectionSortHelper(auxiliaryArray, array, animations);\n  //selectionSortHelper(auxiliaryArray, array, animations);\n  doSelection(array, animations);\n}\nfunction doSelection(array, animations) {\n  let n = auxiliaryArray.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n\n      if (auxiliaryArray[j] < auxiliaryArray[min]) {\n        min = j;\n      }\n    }\n    if (min !== i) {\n      // Swapping the elements\n      let tmp = auxiliaryArray[i];\n      auxiliaryArray[i] = auxiliaryArray[min];\n      auxiliaryArray[min] = tmp;\n      //animations.push([i, auxiliaryArray[min]]);\n      //array[i] = auxiliaryArray[min];\n      //animations.push([min, tmp]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}