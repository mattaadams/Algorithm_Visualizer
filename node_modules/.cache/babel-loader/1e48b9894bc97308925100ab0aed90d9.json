{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  console.log(animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (low < high) {\n    // partIndex is partitioning index, array[p]\n    // is now at right place\n    let partIndex = partition(array, low, high, animations); // Separately sort elements before\n    // partition and after partition\n\n    doQuick(array, low, partIndex - 1, animations);\n    doQuick(array, partIndex + 1, high, animations);\n  }\n}\n\nfunction partition(array, low, high, animations) {\n  // pivot\n  let pivot = array[high];\n  animations.push([1, pivot]); // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (array[j] < pivot) {\n      // Increment index of\n      // smaller element\n      i++;\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      animations.push([1, i, j]);\n      animations.push([2, i, j]);\n      animations.push([3, j, array[j], i, array[i]]);\n    }\n  }\n\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  animations.push([1, i + 1, high]);\n  animations.push([2, i + 1, high]);\n  animations.push([3, high, array[high], i + 1, array[i + 1]]);\n  return i + 1;\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","doQuick","length","console","log","low","high","partIndex","partition","pivot","push","i","j","temp"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,OAAO,CAACF,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACG,MAAN,GAAe,CAA1B,EAA6BF,UAA7B,CAAP;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,SAAOA,UAAP;AACD;;AAED,SAASC,OAAT,CAAiBF,KAAjB,EAAwBM,GAAxB,EAA6BC,IAA7B,EAAmCN,UAAnC,EAA+C;AAC7C,MAAIK,GAAG,GAAGC,IAAV,EAAgB;AACd;AACA;AACA,QAAIC,SAAS,GAAGC,SAAS,CAACT,KAAD,EAAQM,GAAR,EAAaC,IAAb,EAAmBN,UAAnB,CAAzB,CAHc,CAKd;AACA;;AACAC,IAAAA,OAAO,CAACF,KAAD,EAAQM,GAAR,EAAaE,SAAS,GAAG,CAAzB,EAA4BP,UAA5B,CAAP;AACAC,IAAAA,OAAO,CAACF,KAAD,EAAQQ,SAAS,GAAG,CAApB,EAAuBD,IAAvB,EAA6BN,UAA7B,CAAP;AACD;AACF;;AAED,SAASQ,SAAT,CAAmBT,KAAnB,EAA0BM,GAA1B,EAA+BC,IAA/B,EAAqCN,UAArC,EAAiD;AAC/C;AAEA,MAAIS,KAAK,GAAGV,KAAK,CAACO,IAAD,CAAjB;AACAN,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAID,KAAJ,CAAhB,EAJ+C,CAK/C;AACA;AACA;;AACA,MAAIE,CAAC,GAAGN,GAAG,GAAG,CAAd;;AAEA,OAAK,IAAIO,CAAC,GAAGP,GAAb,EAAkBO,CAAC,IAAIN,IAAI,GAAG,CAA9B,EAAiCM,CAAC,EAAlC,EAAsC;AACpC;AACA;AACA,QAAIb,KAAK,CAACa,CAAD,CAAL,GAAWH,KAAf,EAAsB;AACpB;AACA;AAEAE,MAAAA,CAAC;AAED,UAAIE,IAAI,GAAGd,KAAK,CAACY,CAAD,CAAhB;AACAZ,MAAAA,KAAK,CAACY,CAAD,CAAL,GAAWZ,KAAK,CAACa,CAAD,CAAhB;AACAb,MAAAA,KAAK,CAACa,CAAD,CAAL,GAAWC,IAAX;AACAb,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACAZ,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACAZ,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIE,CAAJ,EAAOb,KAAK,CAACa,CAAD,CAAZ,EAAiBD,CAAjB,EAAoBZ,KAAK,CAACY,CAAD,CAAzB,CAAhB;AACD;AACF;;AACD,MAAIE,IAAI,GAAGd,KAAK,CAACY,CAAC,GAAG,CAAL,CAAhB;AACAZ,EAAAA,KAAK,CAACY,CAAC,GAAG,CAAL,CAAL,GAAeZ,KAAK,CAACO,IAAD,CAApB;AACAP,EAAAA,KAAK,CAACO,IAAD,CAAL,GAAcO,IAAd;AACAb,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWL,IAAX,CAAhB;AACAN,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWL,IAAX,CAAhB;AACAN,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIJ,IAAJ,EAAUP,KAAK,CAACO,IAAD,CAAf,EAAuBK,CAAC,GAAG,CAA3B,EAA8BZ,KAAK,CAACY,CAAC,GAAG,CAAL,CAAnC,CAAhB;AAEA,SAAOA,CAAC,GAAG,CAAX;AACD","sourcesContent":["export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  console.log(animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (low < high) {\n    // partIndex is partitioning index, array[p]\n    // is now at right place\n    let partIndex = partition(array, low, high, animations);\n\n    // Separately sort elements before\n    // partition and after partition\n    doQuick(array, low, partIndex - 1, animations);\n    doQuick(array, partIndex + 1, high, animations);\n  }\n}\n\nfunction partition(array, low, high, animations) {\n  // pivot\n\n  let pivot = array[high];\n  animations.push([1, pivot]);\n  // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (array[j] < pivot) {\n      // Increment index of\n      // smaller element\n\n      i++;\n\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      animations.push([1, i, j]);\n      animations.push([2, i, j]);\n      animations.push([3, j, array[j], i, array[i]]);\n    }\n  }\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  animations.push([1, i + 1, high]);\n  animations.push([2, i + 1, high]);\n  animations.push([3, high, array[high], i + 1, array[i + 1]]);\n\n  return i + 1;\n}\n"]},"metadata":{},"sourceType":"module"}