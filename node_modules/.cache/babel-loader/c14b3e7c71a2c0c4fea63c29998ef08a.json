{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (low < high) {\n    // partIndex is partitioning index, array[p]\n    // is now at right place\n    let partIndex = partition(array, low, high, animations); // Separately sort elements before\n    // partition and after partition\n\n    doQuick(array, low, partIndex - 1, animations);\n    doQuick(array, partIndex + 1, high, animations);\n  }\n}\n\nfunction partition(array, low, high, animations) {\n  // pivot\n  let pivot = array[high]; // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (array[j] < pivot) {\n      // Increment index of\n      // smaller element\n      i++;\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      animations.push([4, pivot]); //animations.push([5, pivot]);\n\n      animations.push([1, i, j]);\n      animations.push([2, i, j]);\n      animations.push([3, j, array[j], i, array[i]]);\n    }\n  }\n\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  animations.push([1, i + 1, high]);\n  animations.push([2, i + 1, high]);\n  animations.push([3, high, array[high], i + 1, array[i + 1]]);\n  return i + 1;\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","doQuick","length","low","high","partIndex","partition","pivot","i","j","temp","push"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,OAAO,CAACF,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACG,MAAN,GAAe,CAA1B,EAA6BF,UAA7B,CAAP;AACA,SAAOA,UAAP;AACD;;AAED,SAASC,OAAT,CAAiBF,KAAjB,EAAwBI,GAAxB,EAA6BC,IAA7B,EAAmCJ,UAAnC,EAA+C;AAC7C,MAAIG,GAAG,GAAGC,IAAV,EAAgB;AACd;AACA;AACA,QAAIC,SAAS,GAAGC,SAAS,CAACP,KAAD,EAAQI,GAAR,EAAaC,IAAb,EAAmBJ,UAAnB,CAAzB,CAHc,CAKd;AACA;;AACAC,IAAAA,OAAO,CAACF,KAAD,EAAQI,GAAR,EAAaE,SAAS,GAAG,CAAzB,EAA4BL,UAA5B,CAAP;AACAC,IAAAA,OAAO,CAACF,KAAD,EAAQM,SAAS,GAAG,CAApB,EAAuBD,IAAvB,EAA6BJ,UAA7B,CAAP;AACD;AACF;;AAED,SAASM,SAAT,CAAmBP,KAAnB,EAA0BI,GAA1B,EAA+BC,IAA/B,EAAqCJ,UAArC,EAAiD;AAC/C;AAEA,MAAIO,KAAK,GAAGR,KAAK,CAACK,IAAD,CAAjB,CAH+C,CAI/C;AACA;AACA;;AACA,MAAII,CAAC,GAAGL,GAAG,GAAG,CAAd;;AAEA,OAAK,IAAIM,CAAC,GAAGN,GAAb,EAAkBM,CAAC,IAAIL,IAAI,GAAG,CAA9B,EAAiCK,CAAC,EAAlC,EAAsC;AACpC;AACA;AACA,QAAIV,KAAK,CAACU,CAAD,CAAL,GAAWF,KAAf,EAAsB;AACpB;AACA;AAEAC,MAAAA,CAAC;AAED,UAAIE,IAAI,GAAGX,KAAK,CAACS,CAAD,CAAhB;AAEAT,MAAAA,KAAK,CAACS,CAAD,CAAL,GAAWT,KAAK,CAACU,CAAD,CAAhB;AACAV,MAAAA,KAAK,CAACU,CAAD,CAAL,GAAWC,IAAX;AACAV,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIJ,KAAJ,CAAhB,EAVoB,CAWpB;;AACAP,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIH,CAAJ,EAAOC,CAAP,CAAhB;AACAT,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIH,CAAJ,EAAOC,CAAP,CAAhB;AACAT,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIF,CAAJ,EAAOV,KAAK,CAACU,CAAD,CAAZ,EAAiBD,CAAjB,EAAoBT,KAAK,CAACS,CAAD,CAAzB,CAAhB;AACD;AACF;;AACD,MAAIE,IAAI,GAAGX,KAAK,CAACS,CAAC,GAAG,CAAL,CAAhB;AACAT,EAAAA,KAAK,CAACS,CAAC,GAAG,CAAL,CAAL,GAAeT,KAAK,CAACK,IAAD,CAApB;AACAL,EAAAA,KAAK,CAACK,IAAD,CAAL,GAAcM,IAAd;AACAV,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIH,CAAC,GAAG,CAAR,EAAWJ,IAAX,CAAhB;AACAJ,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIH,CAAC,GAAG,CAAR,EAAWJ,IAAX,CAAhB;AACAJ,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,CAAD,EAAIP,IAAJ,EAAUL,KAAK,CAACK,IAAD,CAAf,EAAuBI,CAAC,GAAG,CAA3B,EAA8BT,KAAK,CAACS,CAAC,GAAG,CAAL,CAAnC,CAAhB;AAEA,SAAOA,CAAC,GAAG,CAAX;AACD","sourcesContent":["export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (low < high) {\n    // partIndex is partitioning index, array[p]\n    // is now at right place\n    let partIndex = partition(array, low, high, animations);\n\n    // Separately sort elements before\n    // partition and after partition\n    doQuick(array, low, partIndex - 1, animations);\n    doQuick(array, partIndex + 1, high, animations);\n  }\n}\n\nfunction partition(array, low, high, animations) {\n  // pivot\n\n  let pivot = array[high];\n  // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (array[j] < pivot) {\n      // Increment index of\n      // smaller element\n\n      i++;\n\n      let temp = array[i];\n\n      array[i] = array[j];\n      array[j] = temp;\n      animations.push([4, pivot]);\n      //animations.push([5, pivot]);\n      animations.push([1, i, j]);\n      animations.push([2, i, j]);\n      animations.push([3, j, array[j], i, array[i]]);\n    }\n  }\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  animations.push([1, i + 1, high]);\n  animations.push([2, i + 1, high]);\n  animations.push([3, high, array[high], i + 1, array[i + 1]]);\n\n  return i + 1;\n}\n"]},"metadata":{},"sourceType":"module"}