{"ast":null,"code":"var _jsxFileName = \"/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx\";\nimport React from 'react';\nimport './AlgoViz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRIMARY_COLOR = 'tomato';\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeArray = this.changeArray.bind(this);\n    this.n_bars = 10;\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * .9));\n    }\n\n    this.setState({\n      array\n    });\n    this.arrayWidth = Math.max(Math.floor(window.innerWidth * .75 / this.n_bars) - 2, 1); // Left offset and margins or just do fraction \n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          width: `${this.arrayWidth}px`,\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.resetArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"changeSize\",\n        type: \"range\",\n        min: \"10\",\n        max: \"200\",\n        onChange: this.changeArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx"],"names":["React","PRIMARY_COLOR","AlgoViz","Component","constructor","props","changeArray","bind","n_bars","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","window","innerHeight","setState","arrayWidth","Math","max","floor","innerWidth","changeBarWidth","evt","target","value","render","map","idx","width","backgroundColor","height","min","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;AAGA,MAAMC,aAAa,GAAG,QAAtB;AAEA,eAAe,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAMF,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACpCH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,EAAD,EAAKC,MAAM,CAACC,WAAP,GAAmB,EAAxB,CAAhC;AACD;;AACD,SAAKC,QAAL,CAAc;AAACR,MAAAA;AAAD,KAAd;AACA,SAAKS,UAAL,GAAkBC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAYN,MAAM,CAACO,UAAP,GAAkB,GAAnB,GAAwB,KAAKf,MAAxC,IAAgD,CAAzD,EAA2D,CAA3D,CAAlB,CAPW,CAOoE;AAChF;;AAEDgB,EAAAA,cAAc,CAACC,GAAD,EAAK;AACjB,SAAKjB,MAAL,GAAciB,GAAG,CAACC,MAAJ,CAAWC,KAAzB;AACA,SAAKf,UAAL;AAED;;AAEDgB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAClB,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,iBACGC,KAAK,CAACmB,GAAN,CAAU,CAACF,KAAD,EAAQG,GAAR,kBACT;AACA,QAAA,SAAS,EAAC,WADV;AAGA,QAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAG,GAAE,KAAKZ,UAAW,IADrB;AAELa,UAAAA,eAAe,EAAE/B,aAFZ;AAGLgC,UAAAA,MAAM,EAAG,GAAEN,KAAM;AAHZ;AAHP,SAEKG,GAFL;AAAA;AAAA;AAAA;AAAA,cADD,CADH,eAWE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKlB,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,GAAG,EAAC,IAHN;AAIE,QAAA,GAAG,EAAC,KAJN;AAKE,QAAA,QAAQ,EAAE,KAAKN;AALjB;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AAxDkD;;AA2DrD,SAASS,qBAAT,CAA+BmB,GAA/B,EAAoCb,GAApC,EAAyC;AACvC;AACA,SAAOD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACe,MAAL,MAAiBd,GAAG,GAAGa,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD","sourcesContent":["import React from 'react';\nimport './AlgoViz.css';\n\n\nconst PRIMARY_COLOR = 'tomato';\n\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeArray = this.changeArray.bind(this);\n    this.n_bars = 10\n    this.state = {\n      array: [],\n    };\n\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight*.9));\n    }\n    this.setState({array});\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth*.75)/this.n_bars)-2,1)// Left offset and margins or just do fraction \n  }\n\n  changeBarWidth(evt){\n    this.n_bars = evt.target.value\n    this.resetArray()\n\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div \n          className=\"array-bar\" \n          key={idx}\n          style={{\n            width: `${this.arrayWidth}px`,\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`\n          }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <input\n          id=\"changeSize\"\n          type=\"range\"\n          min=\"10\"\n          max=\"200\"\n          onChange={this.changeArray}\n          />\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}