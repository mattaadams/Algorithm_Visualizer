{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n} //L+R Quicksort\n\nfunction doQuick(array, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let pivot = start,\n      i = start + 1,\n      j = end;\n\n  while (j >= i) {\n    if (array[j] < array[pivot] && array[i] > array[pivot]) {\n      let temp = array[j];\n      array[j] = array[i];\n      array[i] = temp;\n      animations.push([1, i, j], [2, i, j]);\n      animations.push([4, pivot]);\n      animations.push([3, i, array[i], j, array[j]]);\n    }\n\n    if (array[j] >= array[pivot]) {\n      j--;\n      animations.push([1, i, j], [2, i, j]);\n    }\n\n    if (array[i] <= array[pivot]) {\n      i++;\n      animations.push([1, i, j], [2, i, j]);\n    }\n\n    if (j >= i) {\n      animations.push([1, i, j], [2, i, j]);\n    }\n  }\n\n  if (pivot !== j) {\n    let temp = array[j];\n    array[j] = array[pivot];\n    array[pivot] = temp;\n    animations.push([1, pivot, j], [2, pivot, j]);\n    animations.push([3, pivot, array[pivot], j, array[j]]);\n  }\n\n  doQuick(array, start, j - 1, animations);\n  doQuick(array, j + 1, end, animations);\n} // function partition(array, low, high, animations) {\n//   // pivot\n//   let pivot = array[high];\n//   // Index of smaller element and\n//   // indicates the j position\n//   // of pivot found so far\n//   let i = low - 1;\n//   for (let j = low; j <= high - 1; j++) {\n//     // If current element is smaller\n//     // than the pivot\n//     animations.push([1, i, j], [2, i, j]);\n//     animations.push([3, j, array[j], i, array[i]]);\n//     if (array[j] < pivot) {\n//       // Increment index of\n//       // smaller element\n//       i++;\n//       let temp = array[i];\n//       array[i] = array[j];\n//       array[j] = temp;\n//       animations.push([4, high]); //, [5, high]);\n//     }\n//   }\n//   let temp = array[i + 1];\n//   array[i + 1] = array[high];\n//   array[high] = temp;\n//   animations.push([1, i + 1, high], [2, i + 1, high]);\n//   animations.push([3, high, array[high], i + 1, array[i + 1]]);\n//   return i + 1;\n// }","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","doQuick","length","start","end","pivot","i","j","temp","push"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\n  const animations = [];\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\n//L+R Quicksort\n\nfunction doQuick(array, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n  let pivot = start,\n    i = start + 1,\n    j = end;\n\n  while (j >= i) {\n    if (array[j] < array[pivot] && array[i] > array[pivot]) {\n      let temp = array[j];\n      array[j] = array[i];\n      array[i] = temp;\n      animations.push([1, i, j], [2, i, j]);\n      animations.push([4, pivot]);\n      animations.push([3, i, array[i], j, array[j]]);\n    }\n    if (array[j] >= array[pivot]) {\n      j--;\n      animations.push([1, i, j], [2, i, j]);\n    }\n    if (array[i] <= array[pivot]) {\n      i++;\n      animations.push([1, i, j], [2, i, j]);\n    }\n    if (j >= i) {\n      animations.push([1, i, j], [2, i, j]);\n    }\n  }\n  if (pivot !== j) {\n    let temp = array[j];\n    array[j] = array[pivot];\n    array[pivot] = temp;\n    animations.push([1, pivot, j], [2, pivot, j]);\n    animations.push([3, pivot, array[pivot], j, array[j]]);\n  }\n  doQuick(array, start, j - 1, animations);\n  doQuick(array, j + 1, end, animations);\n}\n\n// function partition(array, low, high, animations) {\n//   // pivot\n\n//   let pivot = array[high];\n//   // Index of smaller element and\n//   // indicates the j position\n//   // of pivot found so far\n//   let i = low - 1;\n\n//   for (let j = low; j <= high - 1; j++) {\n//     // If current element is smaller\n//     // than the pivot\n//     animations.push([1, i, j], [2, i, j]);\n//     animations.push([3, j, array[j], i, array[i]]);\n//     if (array[j] < pivot) {\n//       // Increment index of\n//       // smaller element\n\n//       i++;\n\n//       let temp = array[i];\n//       array[i] = array[j];\n//       array[j] = temp;\n//       animations.push([4, high]); //, [5, high]);\n//     }\n//   }\n//   let temp = array[i + 1];\n//   array[i + 1] = array[high];\n//   array[high] = temp;\n//   animations.push([1, i + 1, high], [2, i + 1, high]);\n//   animations.push([3, high, array[high], i + 1, array[i + 1]]);\n\n//   return i + 1;\n// }\n"]},"metadata":{},"sourceType":"module"}