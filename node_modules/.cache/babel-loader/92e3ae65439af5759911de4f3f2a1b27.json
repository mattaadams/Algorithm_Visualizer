{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = []; // if (array.length <= 1) return array;\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doQuick(arr, low, high) {\n  if (low < high) {\n    // pi is partitioning index, arr[p]\n    // is now at right place\n    let pi = partition(arr, low, high); // Separately sort elements before\n    // partition and after partition\n\n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","length","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","doQuick","arr","low","high","pi","partition","quickSort"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB,CAD4C,CAE5C;;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACJ,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACK,MAAN,GAAe,CAA1B,EAA6BH,cAA7B,EAA6CD,UAA7C,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASG,eAAT,CAAyBE,SAAzB,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDN,cAAtD,EAAsED,UAAtE,EAAkF;AAChF,MAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAJ,EAAAA,eAAe,CAACF,cAAD,EAAiBK,QAAjB,EAA2BE,SAA3B,EAAsCH,SAAtC,EAAiDL,UAAjD,CAAf;AACAG,EAAAA,eAAe,CAACF,cAAD,EAAiBO,SAAS,GAAG,CAA7B,EAAgCD,MAAhC,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;AACAW,EAAAA,OAAO,CAACN,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCN,cAAzC,EAAyDD,UAAzD,CAAP;AACD;;AAED,SAASY,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAID,GAAG,GAAGC,IAAV,EAAgB;AACd;AACA;AACA,QAAIC,EAAE,GAAGC,SAAS,CAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAlB,CAHc,CAKd;AACA;;AACAG,IAAAA,SAAS,CAACL,GAAD,EAAMC,GAAN,EAAWE,EAAE,GAAG,CAAhB,CAAT;AACAE,IAAAA,SAAS,CAACL,GAAD,EAAMG,EAAE,GAAG,CAAX,EAAcD,IAAd,CAAT;AACD;AACF","sourcesContent":["export function getQuickSortAnimations(array) {\n  const animations = [];\n  // if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doQuick(arr, low, high) {\n  if (low < high) {\n    // pi is partitioning index, arr[p]\n    // is now at right place\n    let pi = partition(arr, low, high);\n\n    // Separately sort elements before\n    // partition and after partition\n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}