{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  const tempArray = array.slice();\n  doMerge(array, 0, array.length - 1, tempArray, animations);\n  return animations;\n}\n\nfunction doMerge(mainArray, startIdx, endIdx, tempArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  doMerge(tempArray, startIdx, middleIdx, mainArray, animations);\n  doMerge(tempArray, middleIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (tempArray[i] <= tempArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the temp array.\n      animations.push([k, tempArray[i]]);\n      mainArray[k++] = tempArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the temp array.\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]); //change color\n\n    animations.push([i, i]); //revert color\n\n    animations.push([k, tempArray[i]]); //overwrite index value\n\n    mainArray[k++] = tempArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]); //change color\n\n    animations.push([j, j]); //revert color\n\n    animations.push([k, tempArray[j]]); //overwrite index value\n\n    mainArray[k++] = tempArray[j++];\n  }\n}\n\n_c = Merge;\n\nvar _c;\n\n$RefreshReg$(_c, \"Merge\");","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/MergeSort.js"],"names":["getMergeSortAnimations","array","animations","tempArray","slice","doMerge","length","mainArray","startIdx","endIdx","middleIdx","Math","floor","Merge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  const tempArray = array.slice();\n  doMerge(array, 0, array.length - 1, tempArray, animations);\n  return animations;\n}\n\nfunction doMerge(mainArray, startIdx, endIdx, tempArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  doMerge(tempArray, startIdx, middleIdx, mainArray, animations);\n  doMerge(tempArray, middleIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (tempArray[i] <= tempArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the temp array.\n      animations.push([k, tempArray[i]]);\n      mainArray[k++] = tempArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the temp array.\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]); //change color\n    animations.push([i, i]); //revert color\n    animations.push([k, tempArray[i]]); //overwrite index value\n    mainArray[k++] = tempArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]); //change color\n    animations.push([j, j]); //revert color\n    animations.push([k, tempArray[j]]); //overwrite index value\n    mainArray[k++] = tempArray[j++];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}