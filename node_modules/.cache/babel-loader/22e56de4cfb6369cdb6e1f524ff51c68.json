{"ast":null,"code":"var _jsxFileName = \"/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx\";\nimport React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/MergeSort.js\";\nimport { getSelectionSortAnimations } from \"../Algos/SelectionSort.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRIMARY_COLOR = \"turquoise\";\nconst SECONDARY_COLOR = \"red\";\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = index => this.setState({\n      activeIndex: index\n    });\n\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.n_bars = 30;\n    this.max_n_bars = 300;\n    this.state = {\n      array: [],\n      activeIndex: null,\n      running: false\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n\n    this.setState({\n      array\n    });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n\n    this.animation_speed = 10 * (this.max_n_bars / this.n_bars); // Slower animation for less bars, replace 300 with max_bar\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n\n    setTimeout(() => {\n      this.setState({\n        running: false\n      });\n    }, animations.length * this.animation_speed);\n  }\n\n  quickSort() {\n    alert(\"Not implemented yet\");\n  }\n\n  heapSort() {\n    alert(\"Not implemented yet\");\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      console.log(\"a\", animations[i]);\n      console.log(animations[i][0]);\n      const isColorChange = animations[i][0] = 2 === false;\n\n      if (isColorChange) {\n        const [myKey, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = animations[i][0] === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        console.log(color);\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [myKey, barOneIdx, newHeight, barTwoIdx, oldHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barTwoStyle.height = `${oldHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n\n    setTimeout(() => {\n      this.setState({\n        running: false\n      });\n    }, animations.length * this.animation_speed);\n  }\n\n  startSorting(algo) {\n    this.setState({\n      running: true\n    }, () => {\n      if (algo === \"mergeSort\") {\n        this.mergeSort();\n      } else if (algo === \"quickSort\") {\n        this.quickSort();\n      } else if (algo === \"heapSort\") {\n        this.heapSort();\n      } else if (algo === \"selectionSort\") {\n        this.selectionSort();\n      }\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          width: `${this.arrayWidth}px`,\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(NavBar, {\n        whenClickReset: this.resetArray,\n        whenClickStart: algo => this.startSorting(algo),\n        whenScrolled: this.changeBarWidth,\n        arrayMax: this.max_n_bars,\n        running: this.state.running\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx"],"names":["React","NavBar","getMergeSortAnimations","getSelectionSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","AlgoViz","Component","constructor","props","handleClick","index","setState","activeIndex","changeBarWidth","bind","resetArray","mergeSort","n_bars","max_n_bars","state","array","running","componentDidMount","i","push","randomIntFromInterval","window","innerHeight","arrayWidth","Math","max","floor","innerWidth","animation_speed","evt","target","value","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","alert","heapSort","selectionSort","console","log","myKey","oldHeight","startSorting","algo","render","map","idx","width","min","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/MergeSort.js\";\nimport { getSelectionSortAnimations } from \"../Algos/SelectionSort.js\";\n\nconst PRIMARY_COLOR = \"turquoise\";\nconst SECONDARY_COLOR = \"red\";\n\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n\n    this.n_bars = 30;\n    this.max_n_bars = 300;\n    this.state = {\n      array: [],\n      activeIndex: null,\n      running: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n  handleClick = (index) => this.setState({ activeIndex: index });\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n    this.setState({ array });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n    this.animation_speed = 10 * (this.max_n_bars / this.n_bars); // Slower animation for less bars, replace 300 with max_bar\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n    setTimeout(() => {\n      this.setState({ running: false });\n    }, animations.length * this.animation_speed);\n  }\n  quickSort() {\n    alert(\"Not implemented yet\");\n  }\n\n  heapSort() {\n    alert(\"Not implemented yet\");\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      console.log(\"a\", animations[i]);\n      console.log(animations[i][0]);\n      const isColorChange = (animations[i][0] = 2 === false);\n      if (isColorChange) {\n        const [myKey, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = animations[i][0] === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        console.log(color);\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [myKey, barOneIdx, newHeight, barTwoIdx, oldHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barTwoStyle.height = `${oldHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n    setTimeout(() => {\n      this.setState({ running: false });\n    }, animations.length * this.animation_speed);\n  }\n\n  startSorting(algo) {\n    this.setState({ running: true }, () => {\n      if (algo === \"mergeSort\") {\n        this.mergeSort();\n      } else if (algo === \"quickSort\") {\n        this.quickSort();\n      } else if (algo === \"heapSort\") {\n        this.heapSort();\n      } else if (algo === \"selectionSort\") {\n        this.selectionSort();\n      }\n    });\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${this.arrayWidth}px`,\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}\n          ></div>\n        ))}\n        <NavBar\n          whenClickReset={this.resetArray}\n          whenClickStart={(algo) => this.startSorting(algo)}\n          whenScrolled={this.changeBarWidth}\n          arrayMax={this.max_n_bars}\n          running={this.state.running}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}