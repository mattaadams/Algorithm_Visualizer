{"ast":null,"code":"var _jsxFileName = \"/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx\";\n\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^_\" }]*/\nimport React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/MergeSort.js\";\nimport { getSelectionSortAnimations } from \"../Algos/SelectionSort.js\";\nimport { getQuickSortAnimations } from \"../Algos/QuickSort.js\";\nimport { getHeapSortAnimations } from \"../Algos/HeapSort.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRIMARY_COLOR = \"aqua\";\nconst SECONDARY_COLOR = \"tomato\";\nconst TERTIARY_COLOR = \"yellow\";\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = index => this.setState({\n      activeIndex: index\n    });\n\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.reverseArray = this.reverseArray.bind(this);\n    this.n_bars = 30;\n    this.max_n_bars = 300;\n    this.animation_speed = 1;\n    this.state = {\n      array: [],\n      activeIndex: null,\n      running: false\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n\n    this.setState({\n      array\n    });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n    //this.animation_speed = 5 * (this.max_n_bars / this.n_bars); // Slower animation for less bars, replace 300 with max_bar\n  }\n\n  reverseArray() {\n    let reverseArray = this.state.array.reverse();\n    this.setState({\n      reverseArray\n    });\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  changeSortSpeed(evt) {\n    console.log(evt.target.value);\n    this.animation_speed = evt.target.value;\n  }\n\n  runSort(algoAnimation) {\n    const animations = algoAnimation;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = animations[i][0];\n\n      if (isColorChange < 3) {\n        setTimeout(() => {\n          const [_key, barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = animations[i][0] === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else if (isColorChange >= 4 && isColorChange < 6) {\n        setTimeout(() => {\n          const [_key, barOneIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const color = animations[i][0] === 4 ? TERTIARY_COLOR : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else if (isColorChange === 6) {\n        setTimeout(() => {\n          const [_key, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [_key, barOneIdx, newHeight, barTwoIdx, oldHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barTwoStyle.height = `${oldHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n\n    setTimeout(() => {\n      this.setState({\n        running: false\n      });\n    }, animations.length * this.animation_speed);\n  }\n\n  startSorting(algo) {\n    this.setState({\n      running: true\n    }, () => {\n      let animation;\n\n      if (algo === \"mergeSort\") {\n        animation = getMergeSortAnimations(this.state.array);\n      } else if (algo === \"quickSort\") {\n        animation = getQuickSortAnimations(this.state.array);\n      } else if (algo === \"heapSort\") {\n        animation = getHeapSortAnimations(this.state.array);\n      } else if (algo === \"selectionSort\") {\n        animation = getSelectionSortAnimations(this.state.array);\n      }\n\n      this.runSort(animation);\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          width: `${this.arrayWidth}px`,\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(NavBar, {\n        whenClickReset: this.resetArray,\n        whenClickReverse: this.reverseArray,\n        whenClickStart: algo => this.startSorting(algo),\n        changeSize: this.changeBarWidth,\n        changeSpeed: this.changeSortSpeed,\n        arrayMax: this.max_n_bars,\n        running: this.state.running\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx"],"names":["React","NavBar","getMergeSortAnimations","getSelectionSortAnimations","getQuickSortAnimations","getHeapSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","AlgoViz","Component","constructor","props","handleClick","index","setState","activeIndex","changeBarWidth","bind","resetArray","reverseArray","n_bars","max_n_bars","animation_speed","state","array","running","componentDidMount","i","push","randomIntFromInterval","window","innerHeight","arrayWidth","Math","max","floor","innerWidth","reverse","evt","target","value","changeSortSpeed","console","log","runSort","algoAnimation","animations","length","arrayBars","document","getElementsByClassName","isColorChange","setTimeout","_key","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","newHeight","height","oldHeight","startSorting","algo","animation","render","map","idx","width","min","random"],"mappings":"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","sourcesContent":["/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^_\" }]*/\n\nimport React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/MergeSort.js\";\nimport { getSelectionSortAnimations } from \"../Algos/SelectionSort.js\";\nimport { getQuickSortAnimations } from \"../Algos/QuickSort.js\";\nimport { getHeapSortAnimations } from \"../Algos/HeapSort.js\";\n\nconst PRIMARY_COLOR = \"aqua\";\nconst SECONDARY_COLOR = \"tomato\";\nconst TERTIARY_COLOR = \"yellow\";\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.reverseArray = this.reverseArray.bind(this);\n\n    this.n_bars = 30;\n    this.max_n_bars = 300;\n    this.animation_speed = 1;\n    this.state = {\n      array: [],\n      activeIndex: null,\n      running: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n  handleClick = (index) => this.setState({ activeIndex: index });\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n    this.setState({ array });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n    //this.animation_speed = 5 * (this.max_n_bars / this.n_bars); // Slower animation for less bars, replace 300 with max_bar\n  }\n\n  reverseArray() {\n    let reverseArray = this.state.array.reverse();\n    this.setState({ reverseArray });\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  changeSortSpeed(evt) {\n    console.log(evt.target.value);\n    this.animation_speed = evt.target.value;\n  }\n\n  runSort(algoAnimation) {\n    const animations = algoAnimation;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = animations[i][0];\n      if (isColorChange < 3) {\n        setTimeout(() => {\n          const [_key, barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = animations[i][0] === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else if (isColorChange >= 4 && isColorChange < 6) {\n        setTimeout(() => {\n          const [_key, barOneIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const color = animations[i][0] === 4 ? TERTIARY_COLOR : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = color;\n        }, i * this.animation_speed);\n      } else if (isColorChange === 6) {\n        setTimeout(() => {\n          const [_key, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [_key, barOneIdx, newHeight, barTwoIdx, oldHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barTwoStyle.height = `${oldHeight}px`;\n        }, i * this.animation_speed);\n      }\n    }\n    setTimeout(() => {\n      this.setState({ running: false });\n    }, animations.length * this.animation_speed);\n  }\n\n  startSorting(algo) {\n    this.setState({ running: true }, () => {\n      let animation;\n      if (algo === \"mergeSort\") {\n        animation = getMergeSortAnimations(this.state.array);\n      } else if (algo === \"quickSort\") {\n        animation = getQuickSortAnimations(this.state.array);\n      } else if (algo === \"heapSort\") {\n        animation = getHeapSortAnimations(this.state.array);\n      } else if (algo === \"selectionSort\") {\n        animation = getSelectionSortAnimations(this.state.array);\n      }\n      this.runSort(animation);\n    });\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${this.arrayWidth}px`,\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}\n          ></div>\n        ))}\n        <NavBar\n          whenClickReset={this.resetArray}\n          whenClickReverse={this.reverseArray}\n          whenClickStart={(algo) => this.startSorting(algo)}\n          changeSize={this.changeBarWidth}\n          changeSpeed={this.changeSortSpeed}\n          arrayMax={this.max_n_bars}\n          running={this.state.running}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}