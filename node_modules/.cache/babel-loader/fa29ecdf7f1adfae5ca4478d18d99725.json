{"ast":null,"code":"var _jsxFileName = \"/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx\";\nimport React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/Algos.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRIMARY_COLOR = \"turquoise\";\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n// This is the main color of the array bars.\n// This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = \"red\";\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.n_bars = 10;\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n\n    this.setState({\n      array\n    });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  mergeSort(evt) {\n    alert(evt);\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  selectionSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          width: `${this.arrayWidth}px`,\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(NavBar, {\n        whenClickReset: this.resetArray,\n        whenScrolled: this.changeBarWidth,\n        arrayMax: 300,\n        mergeSortClick: () => this.mergeSort(\"e\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/AlgoViz/AlgoViz.jsx"],"names":["React","NavBar","getMergeSortAnimations","PRIMARY_COLOR","ANIMATION_SPEED_MS","SECONDARY_COLOR","AlgoViz","Component","constructor","props","changeBarWidth","bind","resetArray","n_bars","state","array","componentDidMount","i","push","randomIntFromInterval","window","innerHeight","setState","arrayWidth","Math","max","floor","innerWidth","evt","target","value","mergeSort","alert","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","selectionSort","render","map","idx","width","min","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./AlgoViz.css\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { getMergeSortAnimations } from \"../Algos/Algos.js\";\n\nconst PRIMARY_COLOR = \"turquoise\";\n\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\n\n// This is the main color of the array bars.\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"red\";\n\nexport default class AlgoViz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeBarWidth = this.changeBarWidth.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n\n    this.n_bars = 10;\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.n_bars; i++) {\n      array.push(randomIntFromInterval(10, window.innerHeight * 0.9));\n    }\n    this.setState({ array });\n    this.arrayWidth = Math.max(Math.floor((window.innerWidth - 200) / this.n_bars) - 2, 1); // Left offset and margins or just do fraction\n  }\n\n  changeBarWidth(evt) {\n    this.n_bars = evt.target.value;\n    this.resetArray();\n  }\n\n  mergeSort(evt) {\n    alert(evt);\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  quickSort() {}\n\n  heapSort() {}\n\n  selectionSort() {}\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${this.arrayWidth}px`,\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}\n          ></div>\n        ))}\n        <NavBar\n          whenClickReset={this.resetArray}\n          whenScrolled={this.changeBarWidth}\n          arrayMax={300}\n          mergeSortClick={() => this.mergeSort(\"e\")}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}