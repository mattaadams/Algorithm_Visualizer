{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doHeap(array, animations);\n  return animations;\n}\n\nfunction sort(arr) {\n  var n = arr.length; // Build heap (rearrange array)\n\n  for (var i = Math.floor(n / 2) - 1; i >= 0; i--) heapify(arr, n, i); // One by one extract an element from heap\n\n\n  for (var i = n - 1; i > 0; i--) {\n    // Move current root to end\n    var temp = arr[0];\n    arr[0] = arr[i];\n    arr[i] = temp; // call max heapify on the reduced heap\n\n    heapify(arr, i, 0);\n  }\n} // To heapify a subtree rooted with node i which is\n// an index in arr[]. n is size of heap\n\n\nfunction heapify(arr, n, i) {\n  var largest = i; // Initialize largest as root\n\n  var l = 2 * i + 1; // left = 2*i + 1\n\n  var r = 2 * i + 2; // right = 2*i + 2\n  // If left child is larger than root\n\n  if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far\n\n  if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root\n\n  if (largest != i) {\n    var swap = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = swap; // Recursively heapify the affected sub-tree\n\n    heapify(arr, n, largest);\n  }\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","length","doHeap","sort","arr","n","i","Math","floor","heapify","temp","largest","l","r","swap"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,MAAM,CAACH,KAAD,EAAQC,UAAR,CAAN;AACA,SAAOA,UAAP;AACD;;AAED,SAASG,IAAT,CAAcC,GAAd,EAAmB;AACjB,MAAIC,CAAC,GAAGD,GAAG,CAACH,MAAZ,CADiB,CAGjB;;AACA,OAAK,IAAIK,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,CAAf,IAAoB,CAAjC,EAAoCC,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiDG,OAAO,CAACL,GAAD,EAAMC,CAAN,EAASC,CAAT,CAAP,CAJhC,CAMjB;;;AACA,OAAK,IAAIA,CAAC,GAAGD,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9B;AACA,QAAII,IAAI,GAAGN,GAAG,CAAC,CAAD,CAAd;AACAA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAACE,CAAD,CAAZ;AACAF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASI,IAAT,CAJ8B,CAM9B;;AACAD,IAAAA,OAAO,CAACL,GAAD,EAAME,CAAN,EAAS,CAAT,CAAP;AACD;AACF,C,CAED;AACA;;;AACA,SAASG,OAAT,CAAiBL,GAAjB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,MAAIK,OAAO,GAAGL,CAAd,CAD0B,CACT;;AACjB,MAAIM,CAAC,GAAG,IAAIN,CAAJ,GAAQ,CAAhB,CAF0B,CAEP;;AACnB,MAAIO,CAAC,GAAG,IAAIP,CAAJ,GAAQ,CAAhB,CAH0B,CAGP;AAEnB;;AACA,MAAIM,CAAC,GAAGP,CAAJ,IAASD,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACO,OAAD,CAAzB,EAAoCA,OAAO,GAAGC,CAAV,CANV,CAQ1B;;AACA,MAAIC,CAAC,GAAGR,CAAJ,IAASD,GAAG,CAACS,CAAD,CAAH,GAAST,GAAG,CAACO,OAAD,CAAzB,EAAoCA,OAAO,GAAGE,CAAV,CATV,CAW1B;;AACA,MAAIF,OAAO,IAAIL,CAAf,EAAkB;AAChB,QAAIQ,IAAI,GAAGV,GAAG,CAACE,CAAD,CAAd;AACAF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASF,GAAG,CAACO,OAAD,CAAZ;AACAP,IAAAA,GAAG,CAACO,OAAD,CAAH,GAAeG,IAAf,CAHgB,CAKhB;;AACAL,IAAAA,OAAO,CAACL,GAAD,EAAMC,CAAN,EAASM,OAAT,CAAP;AACD;AACF","sourcesContent":["export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doHeap(array, animations);\n  return animations;\n}\n\nfunction sort(arr) {\n  var n = arr.length;\n\n  // Build heap (rearrange array)\n  for (var i = Math.floor(n / 2) - 1; i >= 0; i--) heapify(arr, n, i);\n\n  // One by one extract an element from heap\n  for (var i = n - 1; i > 0; i--) {\n    // Move current root to end\n    var temp = arr[0];\n    arr[0] = arr[i];\n    arr[i] = temp;\n\n    // call max heapify on the reduced heap\n    heapify(arr, i, 0);\n  }\n}\n\n// To heapify a subtree rooted with node i which is\n// an index in arr[]. n is size of heap\nfunction heapify(arr, n, i) {\n  var largest = i; // Initialize largest as root\n  var l = 2 * i + 1; // left = 2*i + 1\n  var r = 2 * i + 2; // right = 2*i + 2\n\n  // If left child is larger than root\n  if (l < n && arr[l] > arr[largest]) largest = l;\n\n  // If right child is larger than largest so far\n  if (r < n && arr[r] > arr[largest]) largest = r;\n\n  // If largest is not root\n  if (largest != i) {\n    var swap = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = swap;\n\n    // Recursively heapify the affected sub-tree\n    heapify(arr, n, largest);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}