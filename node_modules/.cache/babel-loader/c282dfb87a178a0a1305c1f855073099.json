{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  doMerge(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction doMerge(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  doMerge(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  doMerge(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n_c = Merge;\n\nvar _c;\n\n$RefreshReg$(_c, \"Merge\");","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/MergeSort.js"],"names":["getMergeSortAnimations","array","animations","auxiliaryArray","slice","doMerge","length","mainArray","startIdx","endIdx","middleIdx","Math","floor","Merge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  doMerge(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction doMerge(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  doMerge(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  doMerge(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}