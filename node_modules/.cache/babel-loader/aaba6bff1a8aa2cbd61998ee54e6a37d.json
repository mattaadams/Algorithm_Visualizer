{"ast":null,"code":"export function getMergeSortAnimations(array){var animations=[];var tempArray=array.slice();doMerge(array,0,array.length-1,tempArray,animations);return animations;}function doMerge(mainArray,startIdx,endIdx,tempArray,animations){if(startIdx===endIdx)return;var midIdx=Math.floor((startIdx+endIdx)/2);doMerge(tempArray,startIdx,midIdx,mainArray,animations);doMerge(tempArray,midIdx+1,endIdx,mainArray,animations);Merge(mainArray,startIdx,midIdx,endIdx,tempArray,animations);}function Merge(mainArray,startIdx,midIdx,endIdx,tempArray,animations){var i=startIdx;var j=midIdx+1;var k=startIdx;while(i<=midIdx&&j<=endIdx){animations.push([1,i,j],[2,i,j]);//change then revert color\nif(tempArray[i]<=tempArray[j]){animations.push([6,k,tempArray[i]]);//overwrite index value\nmainArray[k++]=tempArray[i++];}else{animations.push([6,k,tempArray[j]]);//overwrite index value\nmainArray[k++]=tempArray[j++];}}while(i<=midIdx){animations.push([1,i,i],[2,i,i]);//change then revert color\nanimations.push([6,k,tempArray[i]]);//overwrite index value\nmainArray[k++]=tempArray[i++];}while(j<=endIdx){animations.push([1,j,j],[2,j,j]);//change then revert color\nanimations.push([6,k,tempArray[j]]);//overwrite index value\nmainArray[k++]=tempArray[j++];}}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/MergeSort.js"],"names":["getMergeSortAnimations","array","animations","tempArray","slice","doMerge","length","mainArray","startIdx","endIdx","midIdx","Math","floor","Merge","i","j","k","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  const tempArray = array.slice();\n  doMerge(array, 0, array.length - 1, tempArray, animations);\n  return animations;\n}\n\nfunction doMerge(mainArray, startIdx, endIdx, tempArray, animations) {\n  if (startIdx === endIdx) return;\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  doMerge(tempArray, startIdx, midIdx, mainArray, animations);\n  doMerge(tempArray, midIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, midIdx, endIdx, tempArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, midIdx, endIdx, tempArray, animations) {\n  let i = startIdx;\n  let j = midIdx + 1;\n  let k = startIdx;\n\n  while (i <= midIdx && j <= endIdx) {\n    animations.push([1, i, j], [2, i, j]); //change then revert color\n    if (tempArray[i] <= tempArray[j]) {\n      animations.push([6, k, tempArray[i]]); //overwrite index value\n      mainArray[k++] = tempArray[i++];\n    } else {\n      animations.push([6, k, tempArray[j]]); //overwrite index value\n      mainArray[k++] = tempArray[j++];\n    }\n  }\n  while (i <= midIdx) {\n    animations.push([1, i, i], [2, i, i]); //change then revert color\n    animations.push([6, k, tempArray[i]]); //overwrite index value\n    mainArray[k++] = tempArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([1, j, j], [2, j, j]); //change then revert color\n    animations.push([6, k, tempArray[j]]); //overwrite index value\n    mainArray[k++] = tempArray[j++];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}