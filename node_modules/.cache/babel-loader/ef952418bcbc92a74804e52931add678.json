{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = []; // if (array.length <= 1) return array;\n\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doQuick(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction partition(arr, low, high) {\n  // pivot\n  let pivot = arr[high]; // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (arr[j] < pivot) {\n      // Increment index of\n      // smaller element\n      i++;\n      swap(arr, i, j);\n    }\n  }\n\n  swap(arr, i + 1, high);\n  return i + 1;\n}\n\nfunction doQuick(arr, low, high) {\n  if (low < high) {\n    // pi is partitioning index, arr[p]\n    // is now at right place\n    let pi = partition(arr, low, high); // Separately sort elements before\n    // partition and after partition\n\n    doQuick(arr, low, pi - 1);\n    doQuick(arr, pi + 1, high);\n  }\n}","map":{"version":3,"sources":["/home/matta/algo_viz/src/Algos/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","Math","floor","doQuick","partition","arr","low","high","pivot","i","j","swap","pi"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB,CAD4C,CAE5C;;AACA,SAAOA,UAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDC,cAAtD,EAAsEL,UAAtE,EAAkF;AAChF,MAAIG,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAH,EAAAA,eAAe,CAACI,cAAD,EAAiBF,QAAjB,EAA2BG,SAA3B,EAAsCJ,SAAtC,EAAiDF,UAAjD,CAAf;AACAC,EAAAA,eAAe,CAACI,cAAD,EAAiBC,SAAS,GAAG,CAA7B,EAAgCF,MAAhC,EAAwCF,SAAxC,EAAmDF,UAAnD,CAAf;AACAS,EAAAA,OAAO,CAACP,SAAD,EAAYC,QAAZ,EAAsBG,SAAtB,EAAiCF,MAAjC,EAAyCC,cAAzC,EAAyDL,UAAzD,CAAP;AACD;;AAED,SAASU,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AACjC;AACA,MAAIC,KAAK,GAAGH,GAAG,CAACE,IAAD,CAAf,CAFiC,CAIjC;AACA;AACA;;AACA,MAAIE,CAAC,GAAGH,GAAG,GAAG,CAAd;;AAEA,OAAK,IAAII,CAAC,GAAGJ,GAAb,EAAkBI,CAAC,IAAIH,IAAI,GAAG,CAA9B,EAAiCG,CAAC,EAAlC,EAAsC;AACpC;AACA;AACA,QAAIL,GAAG,CAACK,CAAD,CAAH,GAASF,KAAb,EAAoB;AAClB;AACA;AACAC,MAAAA,CAAC;AACDE,MAAAA,IAAI,CAACN,GAAD,EAAMI,CAAN,EAASC,CAAT,CAAJ;AACD;AACF;;AACDC,EAAAA,IAAI,CAACN,GAAD,EAAMI,CAAC,GAAG,CAAV,EAAaF,IAAb,CAAJ;AACA,SAAOE,CAAC,GAAG,CAAX;AACD;;AAED,SAASN,OAAT,CAAiBE,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAID,GAAG,GAAGC,IAAV,EAAgB;AACd;AACA;AACA,QAAIK,EAAE,GAAGR,SAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAlB,CAHc,CAKd;AACA;;AACAJ,IAAAA,OAAO,CAACE,GAAD,EAAMC,GAAN,EAAWM,EAAE,GAAG,CAAhB,CAAP;AACAT,IAAAA,OAAO,CAACE,GAAD,EAAMO,EAAE,GAAG,CAAX,EAAcL,IAAd,CAAP;AACD;AACF","sourcesContent":["export function getQuickSortAnimations(array) {\n  const animations = [];\n  // if (array.length <= 1) return array;\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doQuick(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction partition(arr, low, high) {\n  // pivot\n  let pivot = arr[high];\n\n  // Index of smaller element and\n  // indicates the right position\n  // of pivot found so far\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    // If current element is smaller\n    // than the pivot\n    if (arr[j] < pivot) {\n      // Increment index of\n      // smaller element\n      i++;\n      swap(arr, i, j);\n    }\n  }\n  swap(arr, i + 1, high);\n  return i + 1;\n}\n\nfunction doQuick(arr, low, high) {\n  if (low < high) {\n    // pi is partitioning index, arr[p]\n    // is now at right place\n    let pi = partition(arr, low, high);\n\n    // Separately sort elements before\n    // partition and after partition\n    doQuick(arr, low, pi - 1);\n    doQuick(arr, pi + 1, high);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}